#!/usr/bin/env python

import os
import sys

class CommandDispatcher(object):
    """Pass execution to another Python module.
    """

    def __init__(self, short_help, long_help, module_name):
        """Constructor.
           @param short_help A few words that describe the application.
           @param long_help Longer text, used in the 'help' command.
           @param module_name Name of the module (e.g. 'IMP.foo') that
                  implements the commands.
        """
        self.short_help = short_help
        self.long_help = long_help
        self.module_name = module_name
        self._progname = os.path.basename(sys.argv[0])

    def main(self):
        if len(sys.argv) <= 1:
            print(self.short_help + " Use '%s help' for help." % self._progname)
        else:
            command = sys.argv[1]
            if command in ('help', '--help', '-h'):
                if len(sys.argv) == 3:
                    self.show_command_help(sys.argv[2])
                else:
                    self.show_help()
            elif command in self._get_all_commands():
                self.do_command(command)
            else:
                self.unknown_command(command)

    def import_module(self, mod=None):
        modname = self.module_name
        if mod is not None:
            modname += "." + mod
        return __import__(modname, {}, {}, [''])

    def unknown_command(self, command):
        print("Unknown command: '%s'" % command)
        print("Use '%s help' for help." % self._progname)
        sys.exit(1)

    def _get_all_commands(self):
        mod = self.import_module()
        return mod._all_commands

    def show_help(self):
        print("%s" % self._progname)
        print(self.long_help + """

Usage: %s <command> [options] [args]

Commands:""" % self._progname)
        commands = self._get_all_commands() + ['help']
        commands.sort()
        cmdlen = max([len(c) for c in commands])
        for c in commands:
            if c == 'help':
                doc = 'Get help on using %s.' % self._progname
            else:
                doc = self.import_module(c).__doc__ or "<no help>"
            c += ' ' * (cmdlen - len(c))
            print('    ' + c + '  ' + doc)
        print("""
Use "%s help <command>" for detailed help on any command.""" % self._progname)

    def do_command(self, command):
        mod = self.import_module(command)
        sys.argv[0] = self._progname + ' ' + command
        del sys.argv[1]
        mod.main()

    def show_command_help(self, command):
        if command == 'help':
            self.show_help()
        elif command in self._get_all_commands() or command == 'help':
            mod = self.import_module(command)
            sys.argv = [self._progname + ' ' + command, '--help']
            mod.main()
        else:
            self.unknown_command(command)

d = CommandDispatcher("CryptoSite.", "Prediction of cryptic binding sites.",
                      "cryptosite")
d.main()
